using AutoMapper;
using Notes.MvcApp.Interfaces;
using Notes.MvcApp.Models;
using Notes.MvcApp.Services.Notes.API.Services.Autogenerated;

namespace Notes.MvcApp.Services
{
    public class NotesService : INotesService
    {
        private readonly NotesApiConnector _notesApiConnector;
        private readonly IMapper _mapper;
        public NotesService(NotesApiConnector notesApiConnector, IMapper mapper)
        {
            _notesApiConnector = notesApiConnector;
            _mapper = mapper;
        }

        public async Task<IEnumerable<NoteViewModel>> GetNotesAsync()
        {
            var notes = await _notesApiConnector.GetNotesAsync();
            return _mapper.Map<List<NoteViewModel>>(notes);
        }

        public async Task<IEnumerable<NoteViewModel>> SearchAsync(string searchText)
        {
            var notes = await _notesApiConnector.SearchAsync(searchText);
            return _mapper.Map<List<NoteViewModel>>(notes);
        }

        public async Task<NoteViewModel> GetNoteAsync(Guid id)
        {
            var note = await _notesApiConnector.GetNoteAsync(id);
            
            return _mapper.Map<NoteViewModel>(note);
        }

        public Task AddNoteAsync(NoteViewModel note)
        {
            var mappedNote = _mapper.Map<NoteApiModel>(note);
            return _notesApiConnector.AddNoteAsync(mappedNote);
        }

        public Task UpdateNoteAsync(NoteViewModel note)
        {
            var mappedNote = _mapper.Map<NoteApiModel>(note);
            return _notesApiConnector.UpdateNoteAsync(note.Id, mappedNote);
        }

        public Task DeleteNoteAsync(Guid id)
        {
            return _notesApiConnector.DeleteNoteAsync(id);
        }
    }
}
